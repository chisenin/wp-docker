name: Build and Push Docker Images

on:
  push:
    branches: [ main, test-nginx-only, verify-only ]
  pull_request:
    branches: [ main, test-nginx-only, verify-only ]
  workflow_dispatch:
    # 允许手动触发工作流，并可以选择要构建的组件
    inputs:
      components:
        description: '要构建的组件（空格分隔：base php nginx all）'
        required: true
        default: 'all'
        type: string

jobs:
  determine-components:
    # 第一阶段：确定需要构建的组件
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      components: ${{ steps.set-components.outputs.components }}
      skip_build: ${{ steps.check-conditions.outputs.skip_build }}
      php_version: ${{ steps.extract-versions.outputs.php_version }}
      nginx_version: ${{ steps.extract-versions.outputs.nginx_version }}
      composer_hash: ${{ steps.extract-versions.outputs.composer_hash }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 检查构建条件
        id: check-conditions
        run: |
          echo "skip_build=$([[ "${{ github.ref }}" == "refs/heads/verify-only" ]] && echo 'true' || echo 'false')" >> $GITHUB_OUTPUT

      - name: 提取版本信息
        id: extract-versions
        run: |
          PHP_VERSION=$(cat build/Dockerfiles/php/php_version.txt 2>/dev/null || echo '8.3.26')
          NGINX_VERSION=$(cat build/Dockerfiles/nginx/nginx_version.txt 2>/dev/null || echo '1.27.2')
          COMPOSER_HASH=$(cat build/Dockerfiles/php/composer_hash.txt 2>/dev/null || echo 'ed0feb545ba87161262f2d45a633e34f591ebb3381f2e0063c345ebea4d228dd0043083717770234ec00c5a9f9593792')

          echo "php_version=$PHP_VERSION" >> $GITHUB_OUTPUT
          echo "nginx_version=$NGINX_VERSION" >> $GITHUB_OUTPUT
          echo "composer_hash=$COMPOSER_HASH" >> $GITHUB_OUTPUT

      - name: 设置要构建的组件
        id: set-components
        run: |
          echo "::group::确定构建组件"
          
          # 检查是否是手动触发
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "手动触发模式：使用用户指定的组件"
            INPUT_COMPONENTS="${{ inputs.components }}"
            
            # 如果选择了all，则包含所有组件
            if [[ "$INPUT_COMPONENTS" == *"all"* ]]; then
              COMPONENTS="base php nginx"
            else
              COMPONENTS="$INPUT_COMPONENTS"
            fi
          else
            # 自动模式：基于git变更检测
            COMPONENTS=""
            
            # 检查是否存在更新组件文件（来自版本监测脚本）
            if [ -f updated_components.txt ]; then
              echo "检测到更新组件文件"
              COMPONENTS=$(cat updated_components.txt)
            else
              echo "通过git diff检测变更"
              # 尝试获取变更文件
              if [ "${{ github.event_name }}" == 'push' ]; then
                # 对于push事件，比较当前提交和前一个提交
                git diff --name-only HEAD~1 HEAD > changed_files.txt
              else
                # 对于pull_request事件，比较PR分支和目标分支
                git fetch origin ${{ github.base_ref }}:base_branch
                git diff --name-only base_branch HEAD > changed_files.txt
              fi
              
              # 根据变更的文件判断需要更新的组件
              if grep -q "build/Dockerfiles/php/" changed_files.txt; then
                COMPONENTS="${COMPONENTS} php"
              fi
              
              if grep -q "build/Dockerfiles/nginx/" changed_files.txt; then
                COMPONENTS="${COMPONENTS} nginx"
              fi
              
              if grep -q "build/Dockerfiles/base/" changed_files.txt; then
                COMPONENTS="${COMPONENTS} base"
              fi
            fi
          fi
          
          # 去重并格式化输出
          COMPONENTS=$(echo "$COMPONENTS" | xargs -n1 | sort -u | xargs)
          echo "确定构建的组件: $COMPONENTS"
          
          # 处理基础镜像依赖关系：如果base被标记为构建，那么php和nginx也应该被构建
          if [[ "$COMPONENTS" == *"base"* ]]; then
            echo "基础镜像需要构建，将同时构建依赖它的组件"
            COMPONENTS="$COMPONENTS php nginx"
            # 再次去重
            COMPONENTS=$(echo "$COMPONENTS" | xargs -n1 | sort -u | xargs)
          fi
          
          echo "最终构建的组件: $COMPONENTS"
          echo "components=$COMPONENTS" >> $GITHUB_OUTPUT
          echo "::endgroup::"

  build-components:
    # 第二阶段：构建组件
    needs: determine-components
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写权限以创建发布
      packages: write
    env:
      SKIP_BUILD_PUSH: ${{ needs.determine-components.outputs.skip_build }}
      PHP_VERSION: ${{ needs.determine-components.outputs.php_version }}
      NGINX_VERSION: ${{ needs.determine-components.outputs.nginx_version }}
      COMPOSER_HASH: ${{ needs.determine-components.outputs.composer_hash }}

    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: 登录 Docker Hub
        if: env.SKIP_BUILD_PUSH != 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: 输出构建信息
        run: |
          echo "::group::构建信息汇总"
          echo "构建组件: ${{ needs.determine-components.outputs.components }}"
          echo "跳过构建: ${{ env.SKIP_BUILD_PUSH }}"
          echo "PHP版本: ${{ env.PHP_VERSION }}"
          echo "Nginx版本: ${{ env.NGINX_VERSION }}"
          echo "事件类型: ${{ github.event_name }}"
          echo "::endgroup::"

      - name: 构建并推送 Base 镜像
        if: env.SKIP_BUILD_PUSH != 'true' && contains(needs.determine-components.outputs.components, 'base')
        run: |
          echo "::group::构建并推送 Base 镜像"
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f ./build/Dockerfiles/base/Dockerfile \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-base:3.22 \
            --push . || {
              echo "::error::构建或推送 Base 镜像失败"
              exit 1
            }
          echo "::endgroup::"

      - name: 构建并推送 PHP 镜像
        if: env.SKIP_BUILD_PUSH != 'true' && contains(needs.determine-components.outputs.components, 'php')
        run: |
          echo "::group::构建并推送 PHP 镜像"
          # 使用提取的变量构建镜像
          docker buildx build --platform linux/amd64,linux/arm64 \
            --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/wordpress-base:3.22 \
            --build-arg COMPOSER_HASH=${{ env.COMPOSER_HASH }} \
            -f ./build/Dockerfiles/php/Dockerfile \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-php:${{ env.PHP_VERSION }} \
            --push . || {
              echo "::error::构建或推送 PHP 镜像失败"
              exit 1
            }
          echo "::endgroup::"
      - name: 构建并推送 Nginx 镜像
        if: env.SKIP_BUILD_PUSH != 'true' && contains(needs.determine-components.outputs.components, 'nginx')
        run: |
          echo "::group::构建并推送 Nginx 镜像"
          # 使用提取的变量构建镜像
          docker buildx build --platform linux/amd64,linux/arm64 \
            --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/wordpress-base:3.22 \
            --build-arg NGINX_VERSION=${{ env.NGINX_VERSION }} \
            -f ./build/Dockerfiles/nginx/Dockerfile \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-nginx:${{ env.NGINX_VERSION }} \
            --push . || {
              echo "::error::构建或推送 Nginx 镜像失败"
              exit 1
            }
          echo "::endgroup::"
      - name: 在verify-only分支上跳过构建
        if: env.SKIP_BUILD_PUSH == 'true'
        run: |
          echo "::group::跳过构建和推送步骤"
          echo "由于在verify-only分支上运行，已跳过构建和推送步骤。"
          echo "此分支专门用于验证Docker Compose配置。"
          echo "::endgroup::"

  create-release:
    # 第四阶段：创建或更新Release（在成功构建后运行）
    needs: [build-components, verify-config]
    if: success()
    runs-on: ubuntu-latest
    permissions:
      contents: write  # 需要写权限以创建发布
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 需要完整历史以生成变更日志

      - name: 设置环境变量
        run: |
          echo "BUILD_TYPE=${{ github.event_name }}" >> $GITHUB_ENV
          echo "BUILD_DATE=$(date -u +"%Y-%m-%d %H:%M:%S UTC")" >> $GITHUB_ENV
          echo "VERSION_TAG=$(date -u +"v%Y%m%d-%H%M%S")" >> $GITHUB_ENV

      - name: 准备发布内容
        id: prepare_release
        run: |
          # 读取版本信息
          PHP_VERSION=$(cat build/Dockerfiles/php/php_version.txt 2>/dev/null || echo '8.3.26')
          NGINX_VERSION=$(cat build/Dockerfiles/nginx/nginx_version.txt 2>/dev/null || echo '1.27.2')
          
          # 生成发布标题
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            RELEASE_TITLE="手动触发构建 ($VERSION_TAG)"
          else
            RELEASE_TITLE="自动版本更新 ($VERSION_TAG)"
          fi
          
          # 生成发布内容
          cat > release_body.md << EOF
          # $RELEASE_TITLE
          
          ## 构建信息
          - **构建类型**: ${{ github.event_name }}
          - **构建时间**: $BUILD_DATE
          - **提交**: ${{ github.sha }}
          
          ## 组件版本
          - **PHP**: $PHP_VERSION
          - **Nginx**: $NGINX_VERSION
          
          ## 更新组件
          以下组件已更新:
          
          - $(echo "${{ needs.determine-components.outputs.components }}" | sed 's/ /\n- /g' || echo "- all components")
          
          ## Docker 镜像
          
          构建并发布以下镜像:
          - ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-php:$PHP_VERSION
          - ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-nginx:$NGINX_VERSION
          
          ## 部署文件说明
          - **auto_deploy.sh**: 自动化部署脚本，一键完成WordPress项目部署
          - **.env.example**: 环境变量配置模板，用于手动部署时创建环境文件
          - **docker-compose.yml**: Docker Compose配置模板，用于手动部署时配置服务
          
          ## 更新日志
          参考 [发布说明](release_notes.md) 获取详细信息。
          EOF
          
          # 设置输出 - 使用正确的GitHub Actions输出格式
          echo "title=$RELEASE_TITLE" >> $GITHUB_OUTPUT
          echo "tag=$VERSION_TAG" >> $GITHUB_OUTPUT
          # 使用base64编码处理body内容以避免格式问题
          BODY_CONTENT=$(cat release_body.md)
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "$BODY_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: 创建GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.prepare_release.outputs.tag }}
          name: ${{ steps.prepare_release.outputs.title }}
          body: ${{ steps.prepare_release.outputs.body }}
          draft: false
          prerelease: false
          generate_release_notes: false
          make_latest: true
          append_body: true
          files: |
            deploy/scripts/*
            deploy/.env.example
            deploy/docker-compose.yml

  verify-config:
    # 第三阶段：验证Docker Compose配置（独立运行，不依赖构建结果）
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Docker 环境
        uses: docker/setup-buildx-action@v3

      - name: 创建测试 .env 文件
        run: |
          echo "创建测试 .env 文件用于验证"
          if [ ! -f .env ]; then
            # 使用默认值创建 .env 文件
            echo "MYSQL_DATABASE=wordpress" > .env
            echo "MYSQL_USER=wordpress" >> .env
            echo "MYSQL_PASSWORD=wordpress" >> .env
            echo "MYSQL_ROOT_PASSWORD=rootpassword" >> .env
            echo "WORDPRESS_DB_HOST=mariadb:3306" >> .env
            echo "WORDPRESS_DB_USER=wordpress" >> .env
            echo "WORDPRESS_DB_PASSWORD=wordpress" >> .env
            echo "WORDPRESS_DB_NAME=wordpress" >> .env
            echo "创建了默认 .env 文件用于验证"
          else
            echo ".env 文件已存在，将使用现有文件进行验证"
          fi

      - name: 验证 docker-compose.yml 格式
        run: |
          echo "::group::验证 docker-compose.yml 格式"
          docker compose config -q || {
            echo "::error::docker-compose.yml 格式验证失败"
            exit 1
          }
          echo "docker-compose.yml 格式验证通过"
          echo "::endgroup::"

      - name: 预览 docker-compose 配置
        run: |
          echo "::group::预览 docker-compose 配置"
          docker compose config
          echo "::endgroup::"

      - name: 检查 docker-compose.yml 中的服务定义
        run: |
          echo "::group::检查服务定义"
          # 检查必需的服务是否已定义
          for service in mariadb redis php nginx; do
            if ! grep -q "^ *$service:" docker-compose.yml; then
              echo "::error::docker-compose.yml 中缺少必需的服务定义: $service"
              exit 1
            else
              echo "服务 $service 已在 docker-compose.yml 中定义"
            fi
          done
          echo "所有必需的服务定义检查通过"
          echo "::endgroup::"

      - name: 测试启动服务
        run: |
          echo "::group::测试服务启动"
          # 尝试启动服务，但设置超时，避免长时间运行
          timeout 30 docker compose up -d mariadb redis || {
            echo "::warning::服务启动超时或失败，这可能是因为这只是验证步骤，不期望实际连接成功"
            docker compose down --volumes
          }
          
          # 尝试查看服务状态
          docker compose ps || true
          
          # 清理服务
          docker compose down --volumes
          echo "::endgroup::"

      - name: 输出验证结果
        run: |
          echo "::group::验证结果摘要"
          echo "✅ 所有配置验证步骤已完成"
          echo "服务定义: mariadb, redis, php, nginx 已验证存在"
          echo "docker-compose.yml 格式验证通过"
          echo "::endgroup::"
