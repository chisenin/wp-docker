name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 版本监控（暂关闭，待测试）
  # check-versions:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     trigger_build: ${{ steps.check.outputs.trigger_build }}
  #     php_version: ${{ steps.check.outputs.php_version }}
  #     nginx_version: ${{ steps.check.outputs.nginx_version }}
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v4
  #     - name: Install skopeo and jq
  #       run: |
  #         sudo apt-get update
  #         sudo apt-get install -y skopeo jq
  #     - name: Run version check script
  #       id: check
  #       run: |
  #         chmod +x scripts/check_versions.sh
  #         ./scripts/check_versions.sh
  #     - name: Upload versions artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: versions
  #         path: versions.json

  build:
    # needs: check-versions
    # if: needs.check-versions.outputs.trigger_build == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Create scripts directory
        run: mkdir -p scripts

      # 步骤1: 构建 base 镜像并导出为 tar（避免 local 引用问题）
      - name: Build and export base image
        run: |
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f ./Dockerfiles/base/Dockerfile \
            -t local/base:3.22 \
            --load ./Dockerfiles/base  # --load 确保加载到本地
          docker save local/base:3.22 -o base.tar  # 导出为 tar 文件

      # 步骤2: 构建 PHP 镜像，使用导入的 base
      - name: Build PHP image
        run: |
          docker load -i base.tar  # 导入 base
          # 提取 PHP 版本（从容器内运行命令）
          PHP_VERSION=$(docker run --rm local/base:3.22 sh -c "apk add --no-cache php && php -v | head -1 | cut -d' ' -f2 | cut -d'-' -f1 | sed 's/-.*//' || echo '8.3'")
          # 构建并推送（使用动态版本）
          docker buildx build --platform linux/amd64,linux/arm64 \
            --build-arg BASE_IMAGE=local/base:3.22 \
            --build-arg COMPOSER_HASH=${{ secrets.COMPOSER_HASH }} \
            -f ./Dockerfiles/php/Dockerfile \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-php:${PHP_VERSION} \
            --push ./Dockerfiles/php
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

      # 步骤3: 构建 Nginx 镜像
      - name: Build Nginx image
        run: |
          docker load -i base.tar  # 再次导入 base，确保可用
          NGINX_VERSION=$(docker run --rm nginx:1.27-alpine3.22 nginx -v 2>&1 | cut -d'/' -f2 | cut -d'.' -f1-3 || echo '1.27.2')
          docker buildx build --platform linux/amd64,linux/arm64 \
            --build-arg BASE_IMAGE=local/base:3.22 \
            -f ./Dockerfiles/nginx/Dockerfile \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-nginx:${NGINX_VERSION} \
            --push ./Dockerfiles/nginx

      # Release 脚本（暂关闭，待测试）
      # - name: Create deployment script
      #   run: |
      #     cat > scripts/generate-env-and-compose.sh << 'EOF'
      #     #!/bin/bash
      #     echo "Generating .env and docker-compose.yml..."
      #     cat > .env << EOT
      #     DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
      #     PHP_VERSION=${{ steps.php-build.outputs.php_version }}
      #     NGINX_VERSION=${{ steps.nginx-build.outputs.nginx_version }}
      #     MYSQL_ROOT_PASSWORD=your_strong_root_password
      #     MYSQL_USER=wp_user
      #     MYSQL_PASSWORD=your_strong_user_password
      #     MYSQL_DATABASE=wordpress
      #     EOT
      #     cat > docker-compose.yml << EOT
      #     version: '3.8'
      #     services:
      #       db:
      #         image: mariadb:10.11.14
      #         container_name: wp_db
      #         restart: unless-stopped
      #         networks:
      #           - app-network
      #         volumes:
      #           - db_data:/var/lib/mysql
      #         environment:
      #           MYSQL_ROOT_PASSWORD: \${MYSQL_ROOT_PASSWORD}
      #           MYSQL_DATABASE: \${MYSQL_DATABASE}
      #           MYSQL_USER: \${MYSQL_USER}
      #           MYSQL_PASSWORD: \${MYSQL_PASSWORD}
      #         expose:
      #           - "3306"
      #       redis:
      #         image: redis:8.2.2-alpine3.22
      #         container_name: wp_redis
      #         restart: unless-stopped
      #         networks:
      #           - app-network
      #         command: redis-server --appendonly yes
      #         volumes:
      #           - redis_data:/data
      #         expose:
      #           - "6379"
      #       wp:
      #         image: \${DOCKERHUB_USERNAME}/wordpress-php:\${PHP_VERSION}
      #         container_name: wp_fpm
      #         restart: unless-stopped
      #         networks:
      #           - app-network
      #         volumes:
      #           - ./html:/var/www/html
      #         expose:
      #           - "9000"
      #         depends_on:
      #           - db
      #           - redis
      #         environment:
      #           WORDPRESS_DB_HOST: db:3306
      #           WORDPRESS_DB_USER: \${MYSQL_USER}
      #           WORDPRESS_DB_PASSWORD: \${MYSQL_PASSWORD}
      #           WORDPRESS_DB_NAME: \${MYSQL_DATABASE}
      #           WORDPRESS_REDIS_HOST: redis
      #           WORDPRESS_REDIS_PORT: 6379
      #       nginx:
      #         image: \${DOCKERHUB_USERNAME}/wordpress-nginx:\${NGINX_VERSION}
      #         container_name: wp_nginx
      #         restart: unless-stopped
      #         networks:
      #           - app-network
      #         volumes:
      #           - ./configs/nginx/nginx.conf:/etc/nginx/nginx.conf
      #           - ./configs/nginx/conf.d:/etc/nginx/conf.d
      #           - ./html:/var/www/html
      #         ports:
      #           - "80:80"
      #         depends_on:
      #           - wp
      #     networks:
      #       app-network:
      #         driver: bridge
      #     volumes:
      #       db_data:
      #       redis_data:
      #     EOT
      #     echo "Generated .env and docker-compose.yml"
      #     EOF
      #     chmod +x scripts/generate-env-and-compose.sh
      # - name: Create Release
      #   uses: softprops/action-gh-release@v2
      #   with:
      #     tag_name: v${{ github.sha }}
      #     name: Release with PHP ${{ steps.php-build.outputs.php_version }} and Nginx ${{ steps.nginx-build.outputs.nginx_version }}
      #     body: Built with PHP ${{ steps.php-build.outputs.php_version }} and Nginx ${{ steps.nginx-build.outputs.nginx_version }}
      #     files: |
      #       scripts/generate-env-and-compose.sh

      - name: Run docker compose for validation (optional)
        run: |
          docker compose up -d
          sleep 10
          curl -f http://localhost || exit 1
          docker compose down