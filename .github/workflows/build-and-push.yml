name: Build and Push Docker Images

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 初始化日志文件
        run: |
          echo "::group::初始化日志文件"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 初始化日志文件" | tee -a run.log
          touch warnings.log errors.log
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 已创建 warnings.log 和 errors.log" | tee -a run.log
          echo "::endgroup::"

      - name: 设置 Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true
      - name: 登录 Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: 记录登录信息到日志
        run: |
          echo "::group::登录 Docker Hub"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 以 ${{ secrets.DOCKERHUB_USERNAME }} 身份登录 Docker Hub" | tee -a run.log
          echo "::endgroup::"

      - name: 创建 scripts 目录
        run: |
          echo "::group::创建 Scripts 目录"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 创建 scripts 目录" | tee -a run.log
          mkdir -p scripts || { echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') 创建 scripts 目录失败" | tee -a errors.log; exit 1; }
          echo "::endgroup::"

      - name: 构建并推送 base 镜像
        run: |
          echo "::group::构建并推送 Base 镜像"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 构建并推送 base 镜像 ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-base:3.22" | tee -a run.log
          docker buildx build --platform linux/amd64,linux/arm64 \
            -f ./Dockerfiles/base/Dockerfile \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-base:3.22 \
            --push ./Dockerfiles/base || { echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') 构建或推送 base 镜像失败" | tee -a errors.log; exit 1; }
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 成功构建并推送 base 镜像" | tee -a run.log
          echo "::endgroup::"

      - name: 获取 Composer hash
        run: |
          echo "::group::获取 Composer Hash"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 获取 Composer hash" | tee -a run.log
          COMPOSER_HASH=$(curl -s --connect-timeout 10 https://composer.github.io/installer.sig || echo "55ce33d7678c5a611085731c9a2ba383d4d23389a81006900a0a43ed373ded6a0ee64936d3ab3d8e444a3e7a120dd6d57b55955475e363fbeefa16e7d97b7c0")
          if [ "$COMPOSER_HASH" = "55ce33d7678c5a611085731c9a2ba383d4d23389a81006900a0a43ed373ded6a0ee64936d3ab3d8e444a3e7a120dd6d57b55955475e363fbeefa16e7d97b7c0" ]; then
            echo "[WARN] $(date '+%Y-%m-%d %H:%M:%S') 获取 Composer hash 失败，使用默认值" | tee -a warnings.log
            echo "::warning::获取 Composer hash 失败，使用默认值"
          else
            echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') Composer hash: $COMPOSER_HASH" | tee -a run.log
          fi
          echo "COMPOSER_HASH=$COMPOSER_HASH" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: 提取 PHP 和 Nginx 版本
        id: extract
        run: |
          echo "::group::提取 PHP 和 Nginx 版本"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 提取 PHP 和 Nginx 版本" | tee -a run.log
          PHP_VERSION=$(cat Dockerfiles/php/php_version.txt 2>/dev/null || echo '8.3.26')
          NGINX_VERSION=$(cat Dockerfiles/nginx/nginx_version.txt 2>/dev/null || echo '1.27.2')
          if [ ! -f Dockerfiles/php/php_version.txt ]; then
            echo "[WARN] $(date '+%Y-%m-%d %H:%M:%S') PHP 版本文件缺失，默认使用 8.3.26" | tee -a warnings.log
            echo "::warning::PHP 版本文件缺失，默认使用 8.3.26"
            echo "8.3.26" > Dockerfiles/php/php_version.txt
          fi
          if [ ! -f Dockerfiles/nginx/nginx_version.txt ]; then
            echo "[WARN] $(date '+%Y-%m-%d %H:%M:%S') Nginx 版本文件缺失，默认使用 1.27.2" | tee -a warnings.log
            echo "::warning::Nginx 版本文件缺失，默认使用 1.27.2"
            echo "1.27.2" > Dockerfiles/nginx/nginx_version.txt
          fi
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') PHP 版本: $PHP_VERSION" | tee -a run.log
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') Nginx 版本: $NGINX_VERSION" | tee -a run.log
          echo "php_version=$PHP_VERSION" >> $GITHUB_OUTPUT
          echo "nginx_version=$NGINX_VERSION" >> $GITHUB_OUTPUT
          echo "PHP_VERSION=$PHP_VERSION" >> $GITHUB_ENV
          echo "NGINX_VERSION=$NGINX_VERSION" >> $GITHUB_ENV
          echo "::endgroup::"

      - name: 构建并推送 PHP 镜像
        run: |
          echo "::group::构建并推送 PHP 镜像"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 构建并推送 PHP 镜像 ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-php:${{ steps.extract.outputs.php_version }}" | tee -a run.log
          docker buildx build --platform linux/amd64,linux/arm64 \
            --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/wordpress-base:3.22 \
            --build-arg COMPOSER_HASH=${{ env.COMPOSER_HASH }} \
            -f ./Dockerfiles/php/Dockerfile \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-php:${{ steps.extract.outputs.php_version }} \
            --push ./Dockerfiles/php || { echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') 构建或推送 PHP 镜像失败" | tee -a errors.log; exit 1; }
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 成功构建并推送 PHP 镜像" | tee -a run.log
          echo "::endgroup::"

      - name: 构建并推送 Nginx 镜像
        run: |
          echo "::group::构建并推送 Nginx 镜像"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 构建并推送 Nginx 镜像 ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-nginx:${{ steps.extract.outputs.nginx_version }}" | tee -a run.log
          docker buildx build --platform linux/amd64,linux/arm64 \
            --build-arg BASE_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/wordpress-base:3.22 \
            -f ./Dockerfiles/nginx/Dockerfile \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/wordpress-nginx:${{ steps.extract.outputs.nginx_version }} \
            --push ./Dockerfiles/nginx || { echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') 构建或推送 Nginx 镜像失败" | tee -a errors.log; exit 1; }
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 成功构建并推送 Nginx 镜像" | tee -a run.log
          echo "::endgroup::"

      - name: 运行 Docker Compose 验证（可选）
        run: |
          echo "::group::运行 Docker Compose 验证"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 开始 Docker Compose 验证" | tee -a run.log
          if [ ! -f docker-compose.yml ]; then
            echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') docker-compose.yml 文件缺失" | tee -a errors.log
            exit 1
          fi
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 启动 Docker Compose 服务" | tee -a run.log
          docker compose --project-directory . up -d || { echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') 启动 Docker Compose 失败" | tee -a errors.log; exit 1; }
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 等待服务启动（10秒）" | tee -a run.log
          sleep 10
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 检查服务连通性" | tee -a run.log
          curl -f --connect-timeout 5 --retry 3 http://localhost || { echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') 服务连通性测试失败" | tee -a errors.log; docker compose logs | tee -a run.log; exit 1; }
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 服务连通性测试通过" | tee -a run.log
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 停止 Docker Compose 服务" | tee -a run.log
          docker compose down || { echo "[WARN] $(date '+%Y-%m-%d %H:%M:%S') 停止 Docker Compose 服务失败" | tee -a warnings.log; }
          echo "::endgroup::"

      - name: 显示警告和错误日志
        if: always()
        run: |
          echo "::group::显示警告和错误日志"
          echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 显示收集的警告和错误日志" | tee -a run.log
          if [ -s warnings.log ]; then
            echo "[WARN] $(date '+%Y-%m-%d %H:%M:%S') 检测到警告:" | tee -a run.log
            cat warnings.log
            echo "::warning::检测到警告，请查看 warnings.log"
          else
            echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 未检测到警告" | tee -a run.log
          fi
          if [ -s errors.log ]; then
            echo "[ERROR] $(date '+%Y-%m-%d %H:%M:%S') 检测到错误:" | tee -a run.log
            cat errors.log
            echo "::error::检测到错误，请查看 errors.log"
            exit 1
          else
            echo "[INFO] $(date '+%Y-%m-%d %H:%M:%S') 未检测到错误" | tee -a run.log
          fi
          echo "::endgroup::"

      - name: 上传日志文件
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-logs
          path: |
            run.log
            warnings.log
            errors.log