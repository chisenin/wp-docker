#!/bin/bash\n\nset -e\n\nDEPLOY_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"\nFORCE_CONFIG=${FORCE_CONFIG:-false}\n\nmkdir -p "$DEPLOY_DIR/logs" 2>/dev/null\n\nprint_blue() {\n    echo -e "\033[34m$1\033[0m"\n}\n\nOS_TYPE=""\nOS_VERSION=""\nCPU_CORES=0\nAVAILABLE_RAM=0\nAVAILABLE_DISK=0\nPHP_MEMORY_LIMIT="512M"\nBACKUP_RETENTION_DAYS=7\nLOG_FILE="$DEPLOY_DIR/logs/deploy.log"\nCPU_LIMIT="2"\nMEMORY_LIMIT="2048m"\nMARIADB_CPU_LIMIT="0.5"\nMARIADB_MEMORY_LIMIT="512m"\nNGINX_CPU_LIMIT="1"\nNGINX_MEMORY_LIMIT="256m"\n\nhandle_error() {\n    echo "Error: $1" >&2\n    echo "[$(date '+%Y-%m-%d %H:%M:%S')] Error: $1" >> "$LOG_FILE"\n    exit 1\n}\n\nlog_message() {\n    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$LOG_FILE"\n    echo "$1"\n}\n\nload_env_file() {\n    if [ -f ".env" ]; then\n        log_message "Loading environment variables from .env file..."\n        while IFS= read -r line || [[ -n "$line" ]]; do\n            [[ -z "$line" || "$line" =~ ^\s*# ]] && continue\n            if [[ "$line" =~ ^([A-Za-z0-9_]+)\s*=\s*(.*)$ ]]; then\n                key="${BASH_REMATCH[1]}"\n                value="${BASH_REMATCH[2]}"\n                value="${value%\"}"\n                value="${value#\"}"\n                value="${value%\'}"\n                value="${value#\'}"\n                export "$key"="$value"\n            fi\n        done < .env\n        # 纭繚鍙橀噺涓嶄负绌哄瓧绗︿覆\n        CPU_LIMIT="${CPU_LIMIT:-2}"\n        MEMORY_LIMIT="${MEMORY_LIMIT:-2048m}"\n        MARIADB_CPU_LIMIT="${MARIADB_CPU_LIMIT:-0.5}"\n        MARIADB_MEMORY_LIMIT="${MARIADB_MEMORY_LIMIT:-512m}"\n        NGINX_CPU_LIMIT="${NGINX_CPU_LIMIT:-1}"\n        NGINX_MEMORY_LIMIT="${NGINX_MEMORY_LIMIT:-256m}"\n    else\n        log_message "Warning: .env file does not exist"\n    fi\n}\n\ndetect_host_environment() {\n    log_message "[Stage 1] Detecting host environment..."\n    load_env_file\n    if [ -f /etc/os-release ]; then\n        . /etc/os-release\n        OS_TYPE="$ID"\n        OS_VERSION="$VERSION_ID"\n    elif [ -f /etc/debian_version ]; then\n        OS_TYPE="debian"\n        OS_VERSION="$(cat /etc/debian_version)"\n    elif [ -f /etc/centos-release ]; then\n        OS_TYPE="centos"\n        OS_VERSION="$(cat /etc/centos-release | sed 's/^.*release //;s/ .*$//')"\n    elif [ -f /etc/alpine-release ]; then\n        OS_TYPE="alpine"\n        OS_VERSION="$(cat /etc/alpine-release)"\n    else\n        handle_error "Unsupported operating system type"\n    fi\n    log_message "Operating system: $OS_TYPE $OS_VERSION"\n}\n\nenvironment_preparation() {\n    log_message "[Stage 2] Preparing environment..."\n    log_message "Checking and creating www-data user/group..."\n    if ! id -u www-data >/dev/null 2>&1; then\n        log_message "Creating www-data user and group..."\n        if [[ "$OS_TYPE" == "alpine" ]]; then\n            addgroup -g 33 -S www-data || handle_error "Failed to create www-data group"\n            adduser -u 33 -D -S -G www-data www-data || handle_error "Failed to create www-data user"\n        else\n            groupadd -g 33 www-data 2>/dev/null || :\n            useradd -u 33 -g www-data -s /sbin/nologin -M www-data 2>/dev/null || :\n        fi\n        log_message "Success: www-data user/group created"\n    fi\n}\n\ncheck_disk_space() {\n    log_message "[Stage 3] Checking disk space..."\n    AVAILABLE_DISK=$(df -h "$DEPLOY_DIR" | tail -1 | awk '{print $4}' | sed 's/G//')\n    if (( $(echo "$AVAILABLE_DISK < 10" | bc -l) )); then\n        handle_error "Insufficient disk space: $AVAILABLE_DISK GB (required: 10 GB)"\n    fi\n    log_message "Available disk space: ${AVAILABLE_DISK}GB"\n}\n\ncheck_memory() {\n    log_message "[Stage 4] Checking memory..."\n    if [[ "$OS_TYPE" == "alpine" ]]; then\n        AVAILABLE_RAM=$(free -m | awk '/Mem:/ {print $2}')\n    else\n        AVAILABLE_RAM=$(free -m | grep Mem | awk '{print $2}')\n    fi\n    if [ "$AVAILABLE_RAM" -lt 2048 ]; then\n        handle_error "Insufficient memory: ${AVAILABLE_RAM}MB (required: 2048 MB)"\n    fi\n    log_message "Available memory: ${AVAILABLE_RAM}MB"\n}\n\ndetermine_deploy_directory() {\n    log_message "[Stage 5] Determining deployment directory..."\n    cd "$DEPLOY_DIR"\n    if [ ! -d "html" ]; then\n        mkdir -p "html"\n        chown -R www-data:www-data "html"\n        chmod -R 755 "html"\n    fi\n    if [ ! -d "configs" ]; then\n        mkdir -p "configs"\n    fi\n    if [ ! -d "backups" ]; then\n        mkdir -p "backups/mysql"\n        chown -R www-data:www-data "backups"\n    fi\n    log_message "Deployment directory: $DEPLOY_DIR"\n}\n\ngenerate_passwords() {\n    log_message "[Stage 6] Generating random passwords and keys..."\n    if [ -z "$MYSQL_ROOT_PASSWORD" ]; then\n        MYSQL_ROOT_PASSWORD=$(openssl rand -base64 16 | tr -dc 'a-zA-Z0-9' | head -c 16)\n    fi\n    if [ -z "$MYSQL_PASSWORD" ]; then\n        MYSQL_PASSWORD=$(openssl rand -base64 16 | tr -dc 'a-zA-Z0-9' | head -c 16)\n    fi\n    if [ -z "$REDIS_PASSWORD" ]; then\n        REDIS_PASSWORD=$(openssl rand -base64 16 | tr -dc 'a-zA-Z0-9' | head -c 16)\n    fi\n    if [ -z "$WORDPRESS_DB_PASSWORD" ]; then\n        WORDPRESS_DB_PASSWORD="$MYSQL_PASSWORD"\n    fi\n    export MYSQL_ROOT_PASSWORD MYSQL_PASSWORD REDIS_PASSWORD WORDPRESS_DB_PASSWORD\n    log_message "Passwords and keys generated successfully"\n}\n\ngenerate_wordpress_keys() {\n    log_message "[Stage 7] Generating WordPress security keys..."\n    WORDPRESS_AUTH_KEY=$(openssl rand -base64 32)\n    WORDPRESS_SECURE_AUTH_KEY=$(openssl rand -base64 32)\n    WORDPRESS_LOGGED_IN_KEY=$(openssl rand -base64 32)\n    WORDPRESS_NONCE_KEY=$(openssl rand -base64 32)\n    WORDPRESS_AUTH_SALT=$(openssl rand -base64 32)\n    WORDPRESS_SECURE_AUTH_SALT=$(openssl rand -base64 32)\n    WORDPRESS_LOGGED_IN_SALT=$(openssl rand -base64 32)\n    WORDPRESS_NONCE_SALT=$(openssl rand -base64 32)\n    export WORDPRESS_AUTH_KEY WORDPRESS_SECURE_AUTH_KEY WORDPRESS_LOGGED_IN_KEY WORDPRESS_NONCE_KEY\n    export WORDPRESS_AUTH_SALT WORDPRESS_SECURE_AUTH_SALT WORDPRESS_LOGGED_IN_SALT WORDPRESS_NONCE_SALT\n    log_message "WordPress security keys generated successfully"\n}\n\noptimize_env_variables() {\n    log_message "[Stage 8] Optimizing environment variables..."\n    MYSQL_DATABASE="${MYSQL_DATABASE:-wordpress}"\n    MYSQL_USER="${MYSQL_USER:-wordpress}"\n    WORDPRESS_DB_NAME="${WORDPRESS_DB_NAME:-wordpress}"\n    WORDPRESS_DB_USER="${WORDPRESS_DB_USER:-wordpress}"\n    WORDPRESS_DB_HOST="${WORDPRESS_DB_HOST:-mariadb}"\n    REDIS_HOST="${REDIS_HOST:-redis}"\n    PHP_VERSION="${PHP_VERSION:-8.1}"\n    MARIADB_VERSION="${MARIADB_VERSION:-10.9}"\n    NGINX_VERSION="${NGINX_VERSION:-1.23}"\n    REDIS_VERSION="${REDIS_VERSION:-7.0}"\n    export MYSQL_DATABASE MYSQL_USER WORDPRESS_DB_NAME WORDPRESS_DB_USER WORDPRESS_DB_HOST REDIS_HOST\n    export PHP_VERSION MARIADB_VERSION NGINX_VERSION REDIS_VERSION\n    log_message "Environment variables optimized successfully"\n}\n\nset_permissions() {\n    log_message "Setting permissions..."\n    chown -R www-data:www-data "$DEPLOY_DIR/html"\n    chmod -R 755 "$DEPLOY_DIR/html"\n    chown -R www-data:www-data "$DEPLOY_DIR/backups"\n    chmod -R 755 "$DEPLOY_DIR/backups"\n    chown -R www-data:www-data "$DEPLOY_DIR/logs"\n    chmod -R 755 "$DEPLOY_DIR/logs"\n    log_message "Permissions set successfully"\n}\n\ncleanup_old_containers() {\n    log_message "Cleaning up old containers..."\n    if command -v docker-compose >/dev/null 2>&1; then\n        DOCKER_COMPOSE_CMD="docker-compose"\n    elif docker compose version >/dev/null 2>&1; then\n        DOCKER_COMPOSE_CMD="docker compose"\n    else\n        handle_error "docker-compose not found"\n    fi\n    if [ -f "docker-compose.yml" ]; then\n        $DOCKER_COMPOSE_CMD down -v --remove-orphans >/dev/null 2>&1 || true\n    fi\n    log_message "Old containers cleaned up successfully"\n}\n\nbuild_images() {\n    log_message "[Stage 10] Building Docker images..."\n    \n    # 纭繚璧勬簮闄愬埗鍙橀噺鏈夐粯璁ゅ€间笖涓嶆槸绌哄瓧绗︿覆\n    if [[ -z "$CPU_LIMIT" || "$CPU_LIMIT" == "" ]]; then\n        log_message "Warning: CPU_LIMIT not set or empty, using default value 2"\n        CPU_LIMIT="2"\n    fi\n    if [[ -z "$MEMORY_LIMIT" || "$MEMORY_LIMIT" == "" ]]; then\n        log_message "Warning: MEMORY_LIMIT not set or empty, using default value 2048m"\n        MEMORY_LIMIT="2048m"\n    fi\n    if [[ -z "$MARIADB_CPU_LIMIT" || "$MARIADB_CPU_LIMIT" == "" ]]; then\n        log_message "Warning: MARIADB_CPU_LIMIT not set or empty, using default value 0.5"\n        MARIADB_CPU_LIMIT="0.5"\n    fi\n    if [[ -z "$MARIADB_MEMORY_LIMIT" || "$MARIADB_MEMORY_LIMIT" == "" ]]; then\n        log_message "Warning: MARIADB_MEMORY_LIMIT not set or empty, using default value 512m"\n        MARIADB_MEMORY_LIMIT="512m"\n    fi\n    if [[ -z "$NGINX_CPU_LIMIT" || "$NGINX_CPU_LIMIT" == "" ]]; then\n        log_message "Warning: NGINX_CPU_LIMIT not set or empty, using default value 1"\n        NGINX_CPU_LIMIT="1"\n    fi\n    if [[ -z "$NGINX_MEMORY_LIMIT" || "$NGINX_MEMORY_LIMIT" == "" ]]; then\n        log_message "Warning: NGINX_MEMORY_LIMIT not set or empty, using default value 256m"\n        NGINX_MEMORY_LIMIT="256m"\n    fi\n    \n    export CPU_LIMIT MEMORY_LIMIT MARIADB_CPU_LIMIT MARIADB_MEMORY_LIMIT NGINX_CPU_LIMIT NGINX_MEMORY_LIMIT\n    \n    if [ ! -f "docker-compose.yml" ] || [ "$FORCE_CONFIG" = true ]; then\n        log_message "Generating docker-compose.yml file..."\n        cat > docker-compose.yml << EOF\nversion: '3.8'\n\nservices:\n  mariadb:\n    image: mariadb:$MARIADB_VERSION\n    container_name: wp_db\n    restart: unless-stopped\n    networks:\n      - wp_network\n    volumes:\n      - ./backups/mysql:/var/lib/mysql\n      - ./configs/mariadb:/etc/mysql/conf.d\n    environment:\n      - MYSQL_ROOT_PASSWORD=$MYSQL_ROOT_PASSWORD\n      - MYSQL_DATABASE=$MYSQL_DATABASE\n      - MYSQL_USER=$MYSQL_USER\n      - MYSQL_PASSWORD=$MYSQL_PASSWORD\n    healthcheck:\n      test: ["CMD", "mysqladmin", "ping", "-u", "root", "-p$MYSQL_ROOT_PASSWORD"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          cpus: "${MARIADB_CPU_LIMIT}"\n          memory: "${MARIADB_MEMORY_LIMIT}"\n\n  redis:\n    image: redis:$REDIS_VERSION\n    container_name: wp_redis\n    restart: unless-stopped\n    networks:\n      - wp_network\n    command: redis-server --requirepass $REDIS_PASSWORD\n    healthcheck:\n      test: ["CMD", "redis-cli", "ping"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          cpus: "0.5"\n          memory: "128m"\n\n  php:\n    build:\n      context: ../build/Dockerfiles/php\n      args:\n        PHP_VERSION: $PHP_VERSION\n    container_name: wp_php\n    restart: unless-stopped\n    networks:\n      - wp_network\n    volumes:\n      - ./html:/var/www/html\n      - ./configs/php.ini:/usr/local/etc/php/conf.d/custom.ini\n    environment:\n      - MYSQL_HOST=$WORDPRESS_DB_HOST\n      - MYSQL_DATABASE=$WORDPRESS_DB_NAME\n      - MYSQL_USER=$WORDPRESS_DB_USER\n      - MYSQL_PASSWORD=$WORDPRESS_DB_PASSWORD\n      - REDIS_HOST=$REDIS_HOST\n      - REDIS_PASSWORD=$REDIS_PASSWORD\n    healthcheck:\n      test: ["CMD", "php-fpm", "-t"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          cpus: "${CPU_LIMIT}"\n          memory: "${MEMORY_LIMIT}"\n\n  nginx:\n    build:\n      context: ../build/Dockerfiles/nginx\n      args:\n        NGINX_VERSION: $NGINX_VERSION\n    container_name: wp_nginx\n    restart: unless-stopped\n    networks:\n      - wp_network\n    volumes:\n      - ./html:/var/www/html\n      - ./configs/nginx.conf:/etc/nginx/nginx.conf:ro\n      - ./configs/conf.d:/etc/nginx/conf.d:ro\n      - ./logs/nginx:/var/log/nginx\n    ports:\n      - "80:80"\n      - "443:443"\n    depends_on:\n      - php\n    healthcheck:\n      test: ["CMD", "nginx", "-t"]\n      interval: 10s\n      timeout: 5s\n      retries: 5\n    deploy:\n      resources:\n        limits:\n          cpus: "${NGINX_CPU_LIMIT}"\n          memory: "${NGINX_MEMORY_LIMIT}"\n\nnetworks:\n  wp_network:\n    driver: bridge\n\nvolumes:\n  mysql_data:\n  wordpress_data:\nEOF\n    fi\n    if ! $DOCKER_COMPOSE_CMD config >/dev/null 2>&1; then\n        handle_error "docker-compose.yml configuration syntax error"\n    fi\n    log_message "Current resource limits: CPU=$CPU_LIMIT, Memory=$MEMORY_LIMIT, MARIADB_CPU=$MARIADB_CPU_LIMIT, MARIADB_MEMORY=$MARIADB_MEMORY_LIMIT, NGINX_CPU=$NGINX_CPU_LIMIT, NGINX_MEMORY=$NGINX_MEMORY_LIMIT"\n    log_message "Building Docker images..."\n    $DOCKER_COMPOSE_CMD build || handle_error "Failed to build Docker images"\n    log_message "Success: Image building completed"\n}\n\ngenerate_configs() {\n    log_message "[Stage 9] Generating configuration files..."\n    if [ ! -f "configs/nginx.conf" ] || [ "$FORCE_CONFIG" = true ]; then\n        log_message "Generating Nginx configuration files..."\n        local worker_processes="auto"\n        if [[ "$OS_TYPE" == "alpine" ]]; then\n            worker_processes="$(nproc)"\n        fi\n        mkdir -p "configs/conf.d"\n        cat > configs/nginx.conf << EOF\nuser www-data;\nworker_processes $worker_processes;\nerror_log /var/log/nginx/error.log warn;\npid /var/run/nginx.pid;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    include /etc/nginx/mime.types;\n    default_type application/octet-stream;\n    \n    log_format main '$remote_addr - $remote_user [$time_local] "$request" '\n                    '$status $body_bytes_sent "$http_referer" '\n                    '"$http_user_agent" "$http_x_forwarded_for"';\n    \n    access_log /var/log/nginx/access.log main;\n    \n    sendfile on;\n    tcp_nopush on;\n    tcp_nodelay on;\n    keepalive_timeout 65;\n    \n    gzip on;\n    gzip_comp_level 5;\n    gzip_min_length 256;\n    gzip_proxied any;\n    gzip_vary on;\n    gzip_types\n        text/plain\n        text/css\n        text/javascript\n        application/javascript\n        application/json\n        application/x-javascript\n        application/xml\n        application/xml+rss\n        application/vnd.ms-fontobject\n        font/opentype\n        image/svg+xml\n        image/x-icon;\n    \n    include /etc/nginx/conf.d/*.conf;\n}\nEOF\n        cat > configs/conf.d/default.conf << EOF\nserver {\n    listen 80;\n    server_name _;\n    root /var/www/html;\n    index index.php index.html index.htm;\n    \n    location / {\n        try_files \$uri \$uri/ /index.php?\$args;\n    }\n    \n    location ~ \.php$ {\n        try_files \$uri =404;\n        fastcgi_split_path_info ^(.+\.php)(/.+)$;\n        fastcgi_pass php:9000;\n        fastcgi_index index.php;\n        include fastcgi_params;\n        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;\n        fastcgi_param PATH_INFO \$fastcgi_path_info;\n    }\n    \n    location ~ /\.(?!well-known).* {\n        deny all;\n    }\n    \n    location ~* \.(jpg|jpeg|png|gif|ico|css|js)$ {\n        expires 30d;\n        add_header Cache-Control "public, no-transform";\n    }\n}\nEOF\n        log_message "Nginx configuration files generated successfully"\n    fi\n    \n    if [ ! -f "configs/php.ini" ] || [ "$FORCE_CONFIG" = true ]; then\n        log_message "Generating PHP configuration file..."\n        cat > configs/php.ini << EOF\nmax_execution_time = 300\nmax_input_time = 600\nmemory_limit = $PHP_MEMORY_LIMIT\npost_max_size = 128M\nupload_max_filesize = 128M\nmax_file_uploads = 20\n\ndate.timezone = Asia/Shanghai\n\nexpose_php = Off\ndisplay_errors = Off\nlog_errors = On\nerror_log = /var/log/php/error.log\n\nsession.save_handler = files\nsession.save_path = "/var/lib/php/sessions"\nsession.gc_probability = 1\nsession.gc_divisor = 1000\nsession.gc_maxlifetime = 1440\nEOF\n        log_message "PHP configuration file generated successfully"\n    fi\n    \n    if [ ! -d "configs/mariadb" ]; then\n        log_message "Creating MariaDB configuration directory..."\n        mkdir -p "configs/mariadb"\n        cat > configs/mariadb/custom.cnf << EOF\n[mysqld]\nmax_connections = 100\nmax_allowed_packet = 16M\ninnodb_buffer_pool_size = 256M\ninnodb_log_file_size = 64M\ncharacter-set-server = utf8mb4\ncollation-server = utf8mb4_unicode_ci\nskip-name-resolve\nEOF\n        log_message "MariaDB configuration created successfully"\n    fi\n}\n\nstart_services() {\n    log_message "[Stage 11] Starting services..."\n    if command -v docker-compose >/dev/null 2>&1; then\n        DOCKER_COMPOSE_CMD="docker-compose"\n    elif docker compose version >/dev/null 2>&1; then\n        DOCKER_COMPOSE_CMD="docker compose"\n    else\n        handle_error "docker-compose not found"\n    fi\n    \n    if [ ! -f "html/wp-config.php" ]; then\n        log_message "Downloading WordPress..."\n        mkdir -p "html"\n        curl -s -L https://wordpress.org/latest.tar.gz | tar -xz -C "html" --strip-components=1\n        \n        log_message "Configuring WordPress..."\n        cp html/wp-config-sample.php html/wp-config.php\n        sed -i "s/database_name_here/$WORDPRESS_DB_NAME/" html/wp-config.php\n        sed -i "s/username_here/$WORDPRESS_DB_USER/" html/wp-config.php\n        sed -i "s/password_here/$WORDPRESS_DB_PASSWORD/" html/wp-config.php\n        sed -i "s/localhost/$WORDPRESS_DB_HOST/" html/wp-config.php\n        \n        sed -i "/define( 'AUTH_KEY',/c\define( 'AUTH_KEY',         '$WORDPRESS_AUTH_KEY' );\n" html/wp-config.php\n        sed -i "/define( 'SECURE_AUTH_KEY',/c\define( 'SECURE_AUTH_KEY',  '$WORDPRESS_SECURE_AUTH_KEY' );\n" html/wp-config.php\n        sed -i "/define( 'LOGGED_IN_KEY',/c\define( 'LOGGED_IN_KEY',    '$WORDPRESS_LOGGED_IN_KEY' );\n" html/wp-config.php\n        sed -i "/define( 'NONCE_KEY',/c\define( 'NONCE_KEY',        '$WORDPRESS_NONCE_KEY' );\n" html/wp-config.php\n        sed -i "/define( 'AUTH_SALT',/c\define( 'AUTH_SALT',        '$WORDPRESS_AUTH_SALT' );\n" html/wp-config.php\n        sed -i "/define( 'SECURE_AUTH_SALT',/c\define( 'SECURE_AUTH_SALT', '$WORDPRESS_SECURE_AUTH_SALT' );\n" html/wp-config.php\n        sed -i "/define( 'LOGGED_IN_SALT',/c\define( 'LOGGED_IN_SALT',   '$WORDPRESS_LOGGED_IN_SALT' );\n" html/wp-config.php\n        sed -i "/define( 'NONCE_SALT',/c\define( 'NONCE_SALT',       '$WORDPRESS_NONCE_SALT' );\n" html/wp-config.php\n        \n        cat >> html/wp-config.php << EOF\n\n/** Redis Configuration */\ndefine('WP_CACHE', true);\ndefine('WP_REDIS_HOST', '$REDIS_HOST');\ndefine('WP_REDIS_PASSWORD', '$REDIS_PASSWORD');\ndefine('WP_REDIS_PORT', 6379);\ndefine('WP_REDIS_TIMEOUT', 1);\ndefine('WP_REDIS_READ_TIMEOUT', 1);\nEOF\n        \n        log_message "WordPress configured successfully"\n    fi\n    \n    log_message "Starting Docker containers..."\n    $DOCKER_COMPOSE_CMD up -d || handle_error "Failed to start Docker containers"\n    \n    log_message "Waiting for containers to be ready..."\n    sleep 10\n    \n    log_message "Checking container status..."\n    if ! $DOCKER_COMPOSE_CMD ps | grep -q "Up"; then\n        handle_error "Some containers failed to start"\n    fi\n    \n    log_message "All containers are running successfully"\n}\n\nsetup_backup_config() {\n    log_message "[Stage 12] Setting up backup configuration..."\n    mkdir -p "$DEPLOY_DIR/scripts"\n    \n    cat > "$DEPLOY_DIR/scripts/backup.sh" << 'EOF'\n#!/bin/bash\n\nBACKUP_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/../backups" && pwd)"\nDATE=$(date +"%Y-%m-%d_%H-%M-%S")\nBACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}\n\nlog_message() {\n    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" >> "$BACKUP_DIR/backup.log"\n    echo "$1"\n}\n\nlog_message "Starting backup process..."\n\n# Backup WordPress files\nlog_message "Backing up WordPress files..."\nif [ -d "../html" ]; then\n    tar -czf "$BACKUP_DIR/wp_files_$DATE.tar.gz" -C "../html" .\n    log_message "WordPress files backup completed"\nelse\n    log_message "Warning: WordPress directory not found"\nfi\n\n# Backup MySQL database\nlog_message "Backing up MySQL database..."\nif docker ps | grep -q "wp_db"; then\n    docker exec wp_db mysqldump -u root -p$(grep MYSQL_ROOT_PASSWORD ../.env | cut -d '=' -f2) wordpress > "$BACKUP_DIR/wp_db_$DATE.sql"\n    gzip "$BACKUP_DIR/wp_db_$DATE.sql"\n    log_message "MySQL database backup completed"\nelse\n    log_message "Warning: MySQL container not running"\nfi\n\n# Clean up old backups\nlog_message "Cleaning up old backups older than $BACKUP_RETENTION_DAYS days..."\nfind "$BACKUP_DIR" -name "wp_*.tar.gz" -o -name "wp_*.sql.gz" -type f -mtime +"$BACKUP_RETENTION_DAYS" -delete\n\nlog_message "Backup process completed successfully"\nEOF\n    \n    chmod +x "$DEPLOY_DIR/scripts/backup.sh"\n    \n    if command -v crontab >/dev/null 2>&1; then\n        log_message "Setting up daily backup cron job..."\n        (crontab -l 2>/dev/null; echo "0 2 * * * $DEPLOY_DIR/scripts/backup.sh >> $DEPLOY_DIR/logs/backup.log 2>&1") | crontab -\n        log_message "Daily backup cron job set up successfully"\n    else\n        log_message "Warning: crontab not found, skipping backup schedule"\n    fi\n}\n\ndisplay_deployment_info() {\n    log_message "[Stage 13] Deployment completed successfully!"\n    print_blue "\n========================================"\n    print_blue "WordPress Docker Deployment Complete"\n    print_blue "========================================"\n    print_blue "Website URL: http://localhost"\n    print_blue "Database Information:"\n    print_blue "  Database Name: $MYSQL_DATABASE"\n    print_blue "  Database User: $MYSQL_USER"\n    print_blue "  Database Password: $MYSQL_PASSWORD"\n    print_blue "  Root Password: $MYSQL_ROOT_PASSWORD"\n    print_blue "Redis Information:"\n    print_blue "  Redis Password: $REDIS_PASSWORD"\n    print_blue "Deployment Directory: $DEPLOY_DIR"\n    print_blue "Log File: $LOG_FILE"\n    print_blue "========================================"\n    print_blue "You can now access your WordPress site at http://localhost"\n    print_blue "========================================\n"\n}\n\nmain() {\n    log_message "Starting WordPress Docker deployment..."\n    \n    while getopts "f" opt; do\n        case $opt in\n            f)\n                FORCE_CONFIG=true\n                log_message "Force config enabled: Will regenerate all configuration files"\n                ;;\n            *)\n                echo "Usage: $0 [-f]"\n                echo "  -f: Force regeneration of all configuration files"\n                exit 1\n                ;;\n        esac\ndone\n    \n    detect_host_environment\n    environment_preparation\n    check_disk_space\n    check_memory\n    determine_deploy_directory\n    generate_passwords\n    generate_wordpress_keys\n    optimize_env_variables\n    set_permissions\n    cleanup_old_containers\n    generate_configs\n    build_images\n    start_services\n    setup_backup_config\n    display_deployment_info\n    \n    log_message "Deployment process completed successfully!"\n}\n\nmain "$@"\n